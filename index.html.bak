import React, { useState, useEffect } from 'react';
import { ChevronRight, ChevronDown, FolderOpen, Folder, CheckCircle2, Clock, AlertCircle, Calendar, User, TrendingUp } from 'lucide-react';

const API_URL = 'http://ap-back.azurewebsites.net';

const StatusBadge = ({ status }) => {
  const statusConfig = {
    nouveau: { color: 'bg-blue-500', text: 'Nouveau', icon: TrendingUp },
    in_progress: { color: 'bg-yellow-500', text: 'En cours', icon: Clock },
    completed: { color: 'bg-green-500', text: 'Terminé', icon: CheckCircle2 },
    overdue: { color: 'bg-red-500', text: 'En retard', icon: AlertCircle },
  };
  
  const config = statusConfig[status] || statusConfig.nouveau;
  const Icon = config.icon;
  
  return (
    <span className={`inline-flex items-center gap-1 px-3 py-1 rounded-full text-xs font-semibold text-white ${config.color} shadow-lg`}>
      <Icon size={12} />
      {config.text}
    </span>
  );
};

const ActionCard = ({ action, depth = 0 }) => {
  const [expanded, setExpanded] = useState(false);
  const [sousActions, setSousActions] = useState([]);
  const [loading, setLoading] = useState(false);

  const fetchSousActions = async () => {
    if (expanded || loading) return;
    setLoading(true);
    try {
      const response = await fetch(`${API_URL}/actions/${action.id}/sous-actions`);
      const data = await response.json();
      setSousActions(data);
    } catch (error) {
      console.error('Erreur:', error);
    }
    setLoading(false);
  };

  const handleToggle = () => {
    if (!expanded && sousActions.length === 0) {
      fetchSousActions();
    }
    setExpanded(!expanded);
  };

  const priorityColors = {
    1: 'border-l-red-500',
    2: 'border-l-orange-500',
    3: 'border-l-yellow-500',
    4: 'border-l-blue-500',
    5: 'border-l-gray-500',
  };

  return (
    <div 
      className="mb-3 animate-fadeIn"
      style={{ marginLeft: `${depth * 24}px`, animationDelay: `${depth * 100}ms` }}
    >
      <div 
        className={`bg-white rounded-lg shadow-md hover:shadow-xl transition-all duration-300 border-l-4 ${priorityColors[action.priorite] || 'border-l-gray-300'} overflow-hidden group`}
      >
        <div className="p-4">
          <div className="flex items-start justify-between">
            <div className="flex-1">
              <div className="flex items-center gap-3 mb-2">
                <button
                  onClick={handleToggle}
                  className="text-purple-600 hover:text-purple-800 transition-colors"
                >
                  {expanded ? <ChevronDown size={20} /> : <ChevronRight size={20} />}
                </button>
                <h4 className="text-lg font-bold text-gray-800 group-hover:text-purple-600 transition-colors">
                  {action.titre}
                </h4>
                <StatusBadge status={action.status} />
              </div>
              
              {action.description && (
                <p className="text-gray-600 text-sm ml-8 mb-3">{action.description}</p>
              )}
              
              <div className="flex flex-wrap gap-4 ml-8 text-sm">
                {action.responsable && (
                  <div className="flex items-center gap-1 text-gray-700">
                    <User size={16} className="text-indigo-500" />
                    <span className="font-medium">{action.responsable}</span>
                  </div>
                )}
                {action.due_date && (
                  <div className="flex items-center gap-1 text-gray-700">
                    <Calendar size={16} className="text-pink-500" />
                    <span>{new Date(action.due_date).toLocaleDateString('fr-FR')}</span>
                  </div>
                )}
                {action.priorite && (
                  <div className="flex items-center gap-1">
                    <span className="text-xs font-semibold text-gray-500">
                      Priorité: {action.priorite}
                    </span>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
        
        {expanded && sousActions.length > 0 && (
          <div className="bg-gradient-to-br from-purple-50 to-pink-50 p-4 border-t border-purple-100">
            <h5 className="text-sm font-bold text-purple-700 mb-3 flex items-center gap-2">
              <ChevronRight size={16} />
              Sous-actions ({sousActions.length})
            </h5>
            {sousActions.map((sa) => (
              <ActionCard key={sa.id} action={sa} depth={0} />
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

const SujetCard = ({ sujet, depth = 0 }) => {
  const [expanded, setExpanded] = useState(false);
  const [sousSujets, setSousSujets] = useState([]);
  const [actions, setActions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('actions');

  const fetchDetails = async () => {
    if (loading) return;
    setLoading(true);
    try {
      const [sousSujetsRes, actionsRes] = await Promise.all([
        fetch(`${API_URL}/sujets/${sujet.id}/sous-sujets`),
        fetch(`${API_URL}/sujets/${sujet.id}/actions`)
      ]);
      const sousSujetsData = await sousSujetsRes.json();
      const actionsData = await actionsRes.json();
      setSousSujets(sousSujetsData);
      setActions(actionsData);
    } catch (error) {
      console.error('Erreur:', error);
    }
    setLoading(false);
  };

  const handleToggle = () => {
    if (!expanded && sousSujets.length === 0 && actions.length === 0) {
      fetchDetails();
    }
    setExpanded(!expanded);
  };

  const progressPercent = sujet.total_actions > 0
    ? Math.round((sujet.completed_actions / sujet.total_actions) * 100)
    : 0;

  return (
    <div 
      className="mb-4 animate-slideIn"
      style={{ marginLeft: `${depth * 20}px`, animationDelay: `${depth * 150}ms` }}
    >
      <div className="bg-gradient-to-br from-white to-gray-50 rounded-xl shadow-lg hover:shadow-2xl transition-all duration-500 overflow-hidden border border-gray-200">
        <div 
          className="p-6 cursor-pointer hover:bg-gradient-to-r hover:from-purple-50 hover:to-indigo-50 transition-all duration-300"
          onClick={handleToggle}
        >
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4 flex-1">
              <div className="relative">
                {expanded ? (
                  <FolderOpen size={32} className="text-amber-500 animate-bounce" />
                ) : (
                  <Folder size={32} className="text-blue-500" />
                )}
                <div className="absolute -top-1 -right-1 bg-gradient-to-br from-purple-500 to-pink-500 text-white text-xs font-bold rounded-full w-5 h-5 flex items-center justify-center shadow-lg">
                  {sujet.total_actions || 0}
                </div>
              </div>
              
              <div className="flex-1">
                <h3 className="text-xl font-bold text-gray-800 mb-1 hover:text-purple-600 transition-colors">
                  {sujet.titre}
                </h3>
                {sujet.description && (
                  <p className="text-gray-600 text-sm mb-2">{sujet.description}</p>
                )}
                
                {sujet.total_actions > 0 && (
                  <div className="space-y-2">
                    <div className="flex items-center gap-4 text-sm">
                      <span className="flex items-center gap-1 text-green-600 font-semibold">
                        <CheckCircle2 size={16} />
                        {sujet.completed_actions} / {sujet.total_actions} terminées
                      </span>
                      {sujet.overdue_actions > 0 && (
                        <span className="flex items-center gap-1 text-red-600 font-semibold">
                          <AlertCircle size={16} />
                          {sujet.overdue_actions} en retard
                        </span>
                      )}
                    </div>
                    
                    <div className="w-full bg-gray-200 rounded-full h-3 overflow-hidden shadow-inner">
                      <div
                        className="bg-gradient-to-r from-green-400 to-emerald-500 h-full rounded-full transition-all duration-700 shadow-lg"
                        style={{ width: `${progressPercent}%` }}
                      >
                        <div className="h-full w-full bg-white opacity-30 animate-pulse"></div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
            
            <button className="text-purple-600 hover:text-purple-800 transition-transform duration-300 hover:scale-125">
              {expanded ? <ChevronDown size={28} /> : <ChevronRight size={28} />}
            </button>
          </div>
        </div>

        {expanded && (
          <div className="border-t border-gray-200 bg-gradient-to-br from-slate-50 to-blue-50">
            <div className="flex border-b border-gray-200">
              <button
                onClick={() => setActiveTab('actions')}
                className={`flex-1 py-3 px-4 text-sm font-semibold transition-all ${
                  activeTab === 'actions'
                    ? 'bg-gradient-to-r from-purple-500 to-indigo-500 text-white shadow-lg'
                    : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                Actions ({actions.length})
              </button>
              <button
                onClick={() => setActiveTab('sousSujets')}
                className={`flex-1 py-3 px-4 text-sm font-semibold transition-all ${
                  activeTab === 'sousSujets'
                    ? 'bg-gradient-to-r from-purple-500 to-indigo-500 text-white shadow-lg'
                    : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                Sous-sujets ({sousSujets.length})
              </button>
            </div>

            <div className="p-6">
              {activeTab === 'actions' && (
                <div>
                  {actions.length > 0 ? (
                    actions.map((action) => (
                      <ActionCard key={action.id} action={action} />
                    ))
                  ) : (
                    <p className="text-gray-500 text-center py-8 italic">Aucune action</p>
                  )}
                </div>
              )}

              {activeTab === 'sousSujets' && (
                <div>
                  {sousSujets.length > 0 ? (
                    sousSujets.map((ss) => (
                      <SujetCard key={ss.id} sujet={ss} depth={1} />
                    ))
                  ) : (
                    <p className="text-gray-500 text-center py-8 italic">Aucun sous-sujet</p>
                  )}
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

const App = () => {
  const [sujets, setSujets] = useState([]);
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const [sujetsRes, statsRes] = await Promise.all([
        fetch(`${API_URL}/sujets-racines`),
        fetch(`${API_URL}/statistiques`)
      ]);
      
      if (!sujetsRes.ok || !statsRes.ok) {
        throw new Error('Erreur de connexion à l\'API');
      }
      
      const sujetsData = await sujetsRes.json();
      const statsData = await statsRes.json();
      
      setSujets(sujetsData);
      setStats(statsData);
      setLoading(false);
    } catch (err) {
      setError(err.message);
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-100 via-blue-100 to-pink-100 flex items-center justify-center">
        <div className="text-center">
          <div className="inline-block animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-purple-600 mb-4"></div>
          <p className="text-xl font-semibold text-gray-700">Chargement...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-red-100 to-pink-100 flex items-center justify-center p-4">
        <div className="bg-white rounded-xl shadow-2xl p-8 max-w-md">
          <AlertCircle size={48} className="text-red-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-800 mb-2 text-center">Erreur de connexion</h2>
          <p className="text-gray-600 text-center mb-4">{error}</p>
          <p className="text-sm text-gray-500 text-center">Vérifiez que l'API est démarrée sur http://localhost:5000</p>
          <button
            onClick={fetchData}
            className="mt-4 w-full bg-gradient-to-r from-purple-500 to-indigo-500 text-white py-2 px-4 rounded-lg font-semibold hover:shadow-lg transition-all"
          >
            Réessayer
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-100 via-blue-100 to-pink-100">
      <div className="container mx-auto px-4 py-8">
        <header className="mb-8 text-center animate-fadeIn">
          <h1 className="text-5xl font-black text-transparent bg-clip-text bg-gradient-to-r from-purple-600 via-pink-600 to-indigo-600 mb-2 animate-pulse">
            📋 Action Plan Manager
          </h1>
          <p className="text-gray-600 text-lg">Visualisez et gérez vos projets et actions</p>
        </header>

        {stats && (
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8 animate-slideIn">
            <div className="bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl shadow-lg p-6 text-white transform hover:scale-105 transition-transform duration-300">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-blue-100 text-sm font-semibold">Total Sujets</p>
                  <p className="text-4xl font-black">{stats.total_sujets}</p>
                </div>
                <Folder size={48} className="opacity-50" />
              </div>
            </div>
            
            <div className="bg-gradient-to-br from-green-500 to-emerald-600 rounded-xl shadow-lg p-6 text-white transform hover:scale-105 transition-transform duration-300">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-green-100 text-sm font-semibold">Terminées</p>
                  <p className="text-4xl font-black">{stats.actions_completed}</p>
                </div>
                <CheckCircle2 size={48} className="opacity-50" />
              </div>
            </div>
            
            <div className="bg-gradient-to-br from-yellow-500 to-orange-600 rounded-xl shadow-lg p-6 text-white transform hover:scale-105 transition-transform duration-300">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-yellow-100 text-sm font-semibold">En cours</p>
                  <p className="text-4xl font-black">{stats.actions_in_progress}</p>
                </div>
                <Clock size={48} className="opacity-50" />
              </div>
            </div>
            
            <div className="bg-gradient-to-br from-red-500 to-pink-600 rounded-xl shadow-lg p-6 text-white transform hover:scale-105 transition-transform duration-300">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-red-100 text-sm font-semibold">En retard</p>
                  <p className="text-4xl font-black">{stats.actions_overdue}</p>
                </div>
                <AlertCircle size={48} className="opacity-50" />
              </div>
            </div>
          </div>
        )}

        <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-2xl p-8">
          <h2 className="text-3xl font-bold text-gray-800 mb-6 flex items-center gap-3">
            <FolderOpen className="text-purple-600" size={32} />
            Sujets Principaux
            <span className="text-lg font-normal text-gray-500">({sujets.length})</span>
          </h2>
          
          {sujets.length > 0 ? (
            <div className="space-y-4">
              {sujets.map((sujet) => (
                <SujetCard key={sujet.id} sujet={sujet} />
              ))}
            </div>
          ) : (
            <div className="text-center py-16">
              <Folder size={64} className="text-gray-300 mx-auto mb-4" />
              <p className="text-gray-500 text-xl">Aucun sujet trouvé</p>
            </div>
          )}
        </div>
      </div>

      <style jsx>{`
        @keyframes fadeIn {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }

        @keyframes slideIn {
          from {
            opacity: 0;
            transform: translateX(-30px);
          }
          to {
            opacity: 1;
            transform: translateX(0);
          }
        }

        .animate-fadeIn {
          animation: fadeIn 0.6s ease-out forwards;
        }

        .animate-slideIn {
          animation: slideIn 0.5s ease-out forwards;
        }
      `}</style>
    </div>
  );
};

export default App;
